version: '3.8'

services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080"  # Traefik dashboard (optional, remove in production)
    environment:
      - TRAEFIK_ACME_EMAIL=${TRAEFIK_ACME_EMAIL:-ariff.mit@gmail.com}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./traefik/traefik.yml:/traefik.yml:ro
      - ./traefik/dynamic.yml:/dynamic.yml:ro
      - traefik-ssl:/ssl
    command:
      - --configFile=/traefik.yml
    networks:
      - traefik-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`traefik.${DOMAIN}`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
      - "traefik.http.services.traefik.loadbalancer.server.port=8080"

  # PostgreSQL Database Service
  db:
    image: postgres:16
    container_name: postgres-db
    restart: unless-stopped
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-rust_server_db}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - traefik-network
    ports:
      - "5432:5432"  # Expose for development (remove in production if not needed)
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Main Rust Application Service
  rust-server:
    build: .
    container_name: rust-server
    restart: unless-stopped
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:password@db:5432/rust_server_db}
      - DB_MAX_CONNECTIONS=${DB_MAX_CONNECTIONS:-10}
      - DB_MAX_LIFETIME=${DB_MAX_LIFETIME:-3600}
      - DB_IDLE_TIMEOUT=${DB_IDLE_TIMEOUT:-600}
      - PORT=${PORT:-3000}
      - RUST_LOG=${RUST_LOG:-info}
    expose:
      - "3000"
    depends_on:
      db:
        condition: service_healthy
    networks:
      - traefik-network
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.rust-server.rule=Host(`${DOMAIN}`)"
      - "traefik.http.routers.rust-server.tls=true"
      - "traefik.http.routers.rust-server.tls.certresolver=letsencrypt"
      - "traefik.http.services.rust-server.loadbalancer.server.port=3000"

  # Example: Additional service (commented out)
  # redis:
  #   image: redis:7-alpine
  #   container_name: redis-cache
  #   restart: unless-stopped
  #   volumes:
  #     - redis-data:/data
  #   networks:
  #     - traefik-network
  #   healthcheck:
  #     test: ["CMD", "redis-cli", "ping"]
  #     interval: 30s
  #     timeout: 10s
  #     retries: 3

volumes:
  traefik-ssl:
  postgres-data:
  # redis-data:  # Uncomment if using Redis

networks:
  traefik-network:
    driver: bridge
